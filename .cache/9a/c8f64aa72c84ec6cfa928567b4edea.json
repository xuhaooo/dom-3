{"id":"main.js","dependencies":[],"generated":{"js":"// 在 jquery.js 里面写了第一句话，在这里使用它\n// window.jQuery() 因为它是全局函数，可以掉 window 使用\n// jQuery()\n// 我们先把我们的第一句代码写一下，获取一个元素，去实现它\n// 测试 \n// const api = jQuery('.test') // 不返回元素们，它返回一个 api 对象\n// api.addClass('red').addClass('blue') // api 里面有什么呢，有个 addClass，功能就是我给你一个 'red'，你把它添加到 div 上面\n// 现在有个问题，我获取到的 api 操作的元素是几个呢，不清楚，怎么办，遍历呗\n// 那 addClass 的实现就是，遍历所有刚才获取到的元素，然后添加 .red\n// 具体实现看 jquery.js 里面，最后 addClass 返回什么呢，不需要返回，可以不写那就返回 undefined，当然写成 return undefined 也行\n// jQuery('.test')\n//     .addClass('red')\n//     .addClass('blue')\n//     .addClass('green')\n// 测试 find\n// const api1 = jQuery('.test')\n// api1.addClass('blue')\n// const api2 = api1.find('.child').addClass('red')\n// api1.addClass('green')\n// 我在 jQuery('.test').find('.child').addClass('red') 之后，突然想回过头去操作 .test 怎么弄，我可以这样\njQuery('.test').find('.child').addClass('red').addClass('blue').addClass('green').end() // 这个 end 的作用就是返回到上一个 api\n.addClass('yellow'); // 即这里的 yellow 会加到 .test 身上\n// find 里的 return jQuery(array) 会 return 一个新的 api 对象，这个 api 对象目前只知道我要操作的元素是 array，那么之前的元素我是完全不知道的啊，那怎么办呢，传给它不就完了么\n// 这样，我们把之前的数据（旧的 api）放在 array 身上，const oldApi = this\n// 然后实现 end，很简单，end(){return this.oldApi}，这个我们的 api 已经不是旧的 api 了，而是新的当前的 api 了\n// find 里面的 this 是旧的 api，end 里面的 this 是新的 api\n// 为什么会变呢，为了方便起见，命名中间过程\n// const api1 = jQuery('.test')\n// const api2 = api1.find('child').addClass('red').addClass('blue').addClass('green')\n// const oldApi = api2.end().addClass('yellow')\n// 第一个 api1 是 jQuery 返回的来操作 .test 的，没问题；第二个 api2 是 find 返回的用来操作 .child 的 api 对象；这个时候 api2.end() api2 调用 end，end 的 this 是哪个 api 啊，肯定是 api2，因为你调用 end 肯定是用新的 api 去调用 end，不然你调用它干嘛，所以 return this.oldApi 这里的 this 是新的 api\n// 报错，因为把旧的 api 放到了数组身上，数组当然没有 addClass 方法了，那就把 oldApi 复制过来，放到返回的 api 对象的里面，oldApi = selectorOrArray.oldApi，这样我们的 api 也有 oldApi 了\n// 测试 each\n\nvar x = jQuery('.test').find('.child');\nx.each(function (xyz) {\n  return log(xyz);\n}); // 测试 parent\n\nvar y = jQuery('.test');\ny.parent().print(); // 打印出 3 个 body，因为有 3 个 .test，应该是一个呀，怎么办呢，push 的时候判断一下\n// 测试 children\n\nvar z = jQuery('.test');\nz.children().print();"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":5,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":6,"column":0}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":7,"column":0}},{"generated":{"line":7,"column":0},"source":"main.js","original":{"line":8,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":10,"column":0}},{"generated":{"line":10,"column":0},"source":"main.js","original":{"line":11,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":13,"column":0}},{"generated":{"line":12,"column":0},"source":"main.js","original":{"line":14,"column":0}},{"generated":{"line":13,"column":0},"source":"main.js","original":{"line":15,"column":0}},{"generated":{"line":14,"column":0},"source":"main.js","original":{"line":16,"column":0}},{"generated":{"line":15,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":16,"column":0},"source":"main.js","original":{"line":19,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":20,"column":0}},{"generated":{"line":18,"column":0},"source":"main.js","original":{"line":22,"column":0}},{"generated":{"line":19,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":20,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"name":"jQuery","generated":{"line":21,"column":0},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":21,"column":6},"source":"main.js","original":{"line":27,"column":6}},{"generated":{"line":21,"column":7},"source":"main.js","original":{"line":27,"column":7}},{"generated":{"line":21,"column":14},"source":"main.js","original":{"line":27,"column":6}},{"generated":{"line":21,"column":15},"source":"main.js","original":{"line":27,"column":0}},{"name":"find","generated":{"line":21,"column":16},"source":"main.js","original":{"line":28,"column":5}},{"generated":{"line":21,"column":20},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":21,"column":21},"source":"main.js","original":{"line":28,"column":10}},{"generated":{"line":21,"column":29},"source":"main.js","original":{"line":27,"column":0}},{"name":"addClass","generated":{"line":21,"column":31},"source":"main.js","original":{"line":29,"column":5}},{"generated":{"line":21,"column":39},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":21,"column":40},"source":"main.js","original":{"line":29,"column":14}},{"generated":{"line":21,"column":45},"source":"main.js","original":{"line":27,"column":0}},{"name":"addClass","generated":{"line":21,"column":47},"source":"main.js","original":{"line":30,"column":5}},{"generated":{"line":21,"column":55},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":21,"column":56},"source":"main.js","original":{"line":30,"column":14}},{"generated":{"line":21,"column":62},"source":"main.js","original":{"line":27,"column":0}},{"name":"addClass","generated":{"line":21,"column":64},"source":"main.js","original":{"line":31,"column":5}},{"generated":{"line":21,"column":72},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":21,"column":73},"source":"main.js","original":{"line":31,"column":14}},{"generated":{"line":21,"column":80},"source":"main.js","original":{"line":27,"column":0}},{"name":"end","generated":{"line":21,"column":82},"source":"main.js","original":{"line":32,"column":5}},{"generated":{"line":21,"column":85},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":21,"column":88},"source":"main.js","original":{"line":32,"column":11}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":27,"column":0}},{"name":"addClass","generated":{"line":22,"column":1},"source":"main.js","original":{"line":33,"column":5}},{"generated":{"line":22,"column":9},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":22,"column":10},"source":"main.js","original":{"line":33,"column":14}},{"generated":{"line":22,"column":18},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":22,"column":21},"source":"main.js","original":{"line":33,"column":24}},{"generated":{"line":23,"column":0},"source":"main.js","original":{"line":35,"column":0}},{"generated":{"line":24,"column":0},"source":"main.js","original":{"line":36,"column":0}},{"generated":{"line":25,"column":0},"source":"main.js","original":{"line":37,"column":0}},{"generated":{"line":26,"column":0},"source":"main.js","original":{"line":38,"column":0}},{"generated":{"line":27,"column":0},"source":"main.js","original":{"line":39,"column":0}},{"generated":{"line":28,"column":0},"source":"main.js","original":{"line":40,"column":0}},{"generated":{"line":29,"column":0},"source":"main.js","original":{"line":41,"column":0}},{"generated":{"line":30,"column":0},"source":"main.js","original":{"line":42,"column":0}},{"generated":{"line":31,"column":0},"source":"main.js","original":{"line":43,"column":0}},{"generated":{"line":32,"column":0},"source":"main.js","original":{"line":44,"column":0}},{"generated":{"line":33,"column":0},"source":"main.js","original":{"line":47,"column":0}},{"generated":{"line":35,"column":0},"source":"main.js","original":{"line":48,"column":0}},{"name":"x","generated":{"line":35,"column":4},"source":"main.js","original":{"line":48,"column":6}},{"generated":{"line":35,"column":5},"source":"main.js","original":{"line":48,"column":7}},{"name":"jQuery","generated":{"line":35,"column":8},"source":"main.js","original":{"line":48,"column":10}},{"generated":{"line":35,"column":14},"source":"main.js","original":{"line":48,"column":16}},{"generated":{"line":35,"column":15},"source":"main.js","original":{"line":48,"column":17}},{"generated":{"line":35,"column":22},"source":"main.js","original":{"line":48,"column":16}},{"generated":{"line":35,"column":23},"source":"main.js","original":{"line":48,"column":10}},{"name":"find","generated":{"line":35,"column":24},"source":"main.js","original":{"line":48,"column":26}},{"generated":{"line":35,"column":28},"source":"main.js","original":{"line":48,"column":10}},{"generated":{"line":35,"column":29},"source":"main.js","original":{"line":48,"column":31}},{"generated":{"line":35,"column":37},"source":"main.js","original":{"line":48,"column":10}},{"generated":{"line":35,"column":38},"source":"main.js","original":{"line":48,"column":0}},{"name":"x","generated":{"line":36,"column":0},"source":"main.js","original":{"line":49,"column":0}},{"generated":{"line":36,"column":1},"source":"main.js","original":{"line":49,"column":1}},{"name":"each","generated":{"line":36,"column":2},"source":"main.js","original":{"line":49,"column":2}},{"generated":{"line":36,"column":6},"source":"main.js","original":{"line":49,"column":0}},{"generated":{"line":36,"column":7},"source":"main.js","original":{"line":49,"column":7}},{"name":"xyz","generated":{"line":36,"column":17},"source":"main.js","original":{"line":49,"column":8}},{"generated":{"line":36,"column":20},"source":"main.js","original":{"line":49,"column":7}},{"generated":{"line":37,"column":0},"source":"main.js","original":{"line":49,"column":7}},{"name":"log","generated":{"line":37,"column":9},"source":"main.js","original":{"line":49,"column":14}},{"generated":{"line":37,"column":12},"source":"main.js","original":{"line":49,"column":17}},{"name":"xyz","generated":{"line":37,"column":13},"source":"main.js","original":{"line":49,"column":18}},{"generated":{"line":37,"column":16},"source":"main.js","original":{"line":49,"column":17}},{"generated":{"line":37,"column":17},"source":"main.js","original":{"line":49,"column":7}},{"generated":{"line":38,"column":0},"source":"main.js","original":{"line":49,"column":7}},{"generated":{"line":38,"column":1},"source":"main.js","original":{"line":49,"column":0}},{"generated":{"line":38,"column":4},"source":"main.js","original":{"line":51,"column":0}},{"generated":{"line":40,"column":0},"source":"main.js","original":{"line":52,"column":0}},{"name":"y","generated":{"line":40,"column":4},"source":"main.js","original":{"line":52,"column":6}},{"generated":{"line":40,"column":5},"source":"main.js","original":{"line":52,"column":7}},{"name":"jQuery","generated":{"line":40,"column":8},"source":"main.js","original":{"line":52,"column":10}},{"generated":{"line":40,"column":14},"source":"main.js","original":{"line":52,"column":16}},{"generated":{"line":40,"column":15},"source":"main.js","original":{"line":52,"column":17}},{"generated":{"line":40,"column":22},"source":"main.js","original":{"line":52,"column":16}},{"generated":{"line":40,"column":23},"source":"main.js","original":{"line":52,"column":0}},{"name":"y","generated":{"line":41,"column":0},"source":"main.js","original":{"line":53,"column":0}},{"generated":{"line":41,"column":1},"source":"main.js","original":{"line":53,"column":1}},{"name":"parent","generated":{"line":41,"column":2},"source":"main.js","original":{"line":53,"column":2}},{"generated":{"line":41,"column":8},"source":"main.js","original":{"line":53,"column":0}},{"name":"print","generated":{"line":41,"column":11},"source":"main.js","original":{"line":53,"column":11}},{"generated":{"line":41,"column":16},"source":"main.js","original":{"line":53,"column":0}},{"generated":{"line":41,"column":20},"source":"main.js","original":{"line":54,"column":0}},{"generated":{"line":42,"column":0},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":44,"column":0},"source":"main.js","original":{"line":57,"column":0}},{"name":"z","generated":{"line":44,"column":4},"source":"main.js","original":{"line":57,"column":6}},{"generated":{"line":44,"column":5},"source":"main.js","original":{"line":57,"column":7}},{"name":"jQuery","generated":{"line":44,"column":8},"source":"main.js","original":{"line":57,"column":10}},{"generated":{"line":44,"column":14},"source":"main.js","original":{"line":57,"column":16}},{"generated":{"line":44,"column":15},"source":"main.js","original":{"line":57,"column":17}},{"generated":{"line":44,"column":22},"source":"main.js","original":{"line":57,"column":16}},{"generated":{"line":44,"column":23},"source":"main.js","original":{"line":57,"column":0}},{"name":"z","generated":{"line":45,"column":0},"source":"main.js","original":{"line":58,"column":0}},{"generated":{"line":45,"column":1},"source":"main.js","original":{"line":58,"column":1}},{"name":"children","generated":{"line":45,"column":2},"source":"main.js","original":{"line":58,"column":2}},{"generated":{"line":45,"column":10},"source":"main.js","original":{"line":58,"column":0}},{"name":"print","generated":{"line":45,"column":13},"source":"main.js","original":{"line":58,"column":13}},{"generated":{"line":45,"column":18},"source":"main.js","original":{"line":58,"column":0}}],"sources":{"main.js":"// 在 jquery.js 里面写了第一句话，在这里使用它\n// window.jQuery() 因为它是全局函数，可以掉 window 使用\n// jQuery()\n\n// 我们先把我们的第一句代码写一下，获取一个元素，去实现它\n// 测试 \n// const api = jQuery('.test') // 不返回元素们，它返回一个 api 对象\n// api.addClass('red').addClass('blue') // api 里面有什么呢，有个 addClass，功能就是我给你一个 'red'，你把它添加到 div 上面\n// 现在有个问题，我获取到的 api 操作的元素是几个呢，不清楚，怎么办，遍历呗\n// 那 addClass 的实现就是，遍历所有刚才获取到的元素，然后添加 .red\n// 具体实现看 jquery.js 里面，最后 addClass 返回什么呢，不需要返回，可以不写那就返回 undefined，当然写成 return undefined 也行\n\n// jQuery('.test')\n//     .addClass('red')\n//     .addClass('blue')\n//     .addClass('green')\n\n// 测试 find\n// const api1 = jQuery('.test')\n// api1.addClass('blue')\n\n// const api2 = api1.find('.child').addClass('red')\n\n// api1.addClass('green')\n\n// 我在 jQuery('.test').find('.child').addClass('red') 之后，突然想回过头去操作 .test 怎么弄，我可以这样\njQuery('.test')\n    .find('.child')\n    .addClass('red')\n    .addClass('blue')\n    .addClass('green')\n    .end() // 这个 end 的作用就是返回到上一个 api\n    .addClass('yellow') // 即这里的 yellow 会加到 .test 身上\n\n// find 里的 return jQuery(array) 会 return 一个新的 api 对象，这个 api 对象目前只知道我要操作的元素是 array，那么之前的元素我是完全不知道的啊，那怎么办呢，传给它不就完了么\n// 这样，我们把之前的数据（旧的 api）放在 array 身上，const oldApi = this\n// 然后实现 end，很简单，end(){return this.oldApi}，这个我们的 api 已经不是旧的 api 了，而是新的当前的 api 了\n// find 里面的 this 是旧的 api，end 里面的 this 是新的 api\n// 为什么会变呢，为了方便起见，命名中间过程\n// const api1 = jQuery('.test')\n// const api2 = api1.find('child').addClass('red').addClass('blue').addClass('green')\n// const oldApi = api2.end().addClass('yellow')\n// 第一个 api1 是 jQuery 返回的来操作 .test 的，没问题；第二个 api2 是 find 返回的用来操作 .child 的 api 对象；这个时候 api2.end() api2 调用 end，end 的 this 是哪个 api 啊，肯定是 api2，因为你调用 end 肯定是用新的 api 去调用 end，不然你调用它干嘛，所以 return this.oldApi 这里的 this 是新的 api\n// 报错，因为把旧的 api 放到了数组身上，数组当然没有 addClass 方法了，那就把 oldApi 复制过来，放到返回的 api 对象的里面，oldApi = selectorOrArray.oldApi，这样我们的 api 也有 oldApi 了\n\n\n// 测试 each\nconst x = jQuery('.test').find('.child')\nx.each((xyz)=>log(xyz))\n\n// 测试 parent\nconst y = jQuery('.test')\ny.parent().print()\n// 打印出 3 个 body，因为有 3 个 .test，应该是一个呀，怎么办呢，push 的时候判断一下\n\n// 测试 children\nconst z = jQuery('.test')\nz.children().print()"},"lineCount":null}},"error":null,"hash":"fa38ccf16a80c9594d254c00035ca3c2","cacheData":{"env":{}}}